class Game {
   field Ship ship; // the square of this game
   field int direction; // the square's current direction: 
                        // 0=none, 1=up, 2=down, 3=left, 4=right

   /** Constructs a new Square Game. */
   constructor Game new() {
      // Creates a ship at topleft
      let ship = Ship.new(0, 0);
      let direction = 0;  // initial state is no movement
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do ship.dispose();
      do Memory.deAlloc(this);
      return;
   }

   /** Moves the square in the current direction. */
   method void moveSquare() {
      if (direction = 1) { do ship.jump(); }
      if (direction = 2) { do ship.moveLeft(); }
      if (direction = 3) { do ship.moveRight(); }
      do Sys.wait(15);  // delays the next movement
      do ship.move();
      return;
   }

   /** Runs the game: handles the user's inputs and moves the square accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      var boolean exit;
      let exit = false;
      
      while (~exit) {
         // waits for a key to be pressed
         let key = Keyboard.keyPressed();

         if (key = 0) { let direction = 0; }
         if (key = 81)  { let exit = true; }     // q key
         if (key = 131) { // up arrow
           let direction = 1; 
         }
         if (key = 130) { 
           let direction = 2;
         }   // left arrow
         if (key = 132) { 
           let direction = 3;
         }   // right arrow
         
        do moveSquare();
     } // while
     return;
   }
}
